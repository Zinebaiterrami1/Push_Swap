Main parsing function: This will take int ac, char **av as parameters, where ac is the argument count, and av is the argument vector.

Helper functions:

A function to check if a number is within the valid integer range.
A function to check for duplicates in the input.
A function to handle empty input.
A function to handle the format of each number (checking for leading zeros, ensuring only one sign, etc.).


//parsing..//
//helper fct
//check number
int check_number(t_stack *a)
{
    t_stack *tmp;
    
    tmp = a;
    while (tmp->next != NULL)
    {
        if(tmp->data >= INT_MAX && tmp->data <= INT_MIN)
            return (1); 
        tmp = tmp->next;
    }
    return(0);
}

int is_digit(const char *str)
{
    int i;

    i = 0;
    if(str[i] == '-' || str[i] == '+')
        i++;
    while (str[i])
    {
        if(str[i] >= '0' && str[i] <= '9')
            return (0);
        i++;
    }
    return (1);
}
//degits or dup ==== error
//main. split . check---parsing. init stack. atoi . hto f node.

//check duplicates
int check_dup(t_stack *a)
{
    t_stack *check;
    t_stack *current;

    current = a;
    while (current->next != NULL)
    {
        check = current->next;
        while (check->next != NULL)
        {
            if(check->data == current->data)
                return (1);
            check = check->next;
        }
        current = current->next;
    }
    return(0);
}

//handle empty input


//algo for >= 6 numbers
void algo_for6_elements_ndmore(t_stack **a, int *arr_sorted)
{
    t_stack *b;
    t_stack *tmp;
    t_stack *tmp1;
    int start, end;
    int size;
    
    b = NULL;
    tmp = *a;
    tmp1 = NULL;
    start = 0;
    (*a)->size = ft_lstsize(*a);
    size = (*a)->size;
    if (size <= 100)
        end = size / 6;
    else
        end = size / 14;
    while (start < end - 1)
    {   
        while (tmp != NULL)
        {
            if(tmp->data <= arr_sorted[end] && tmp->data > arr_sorted[start])
            {   
                pb(a, &b);
                tmp1 = b;
                if(tmp1->data < tmp1->next->data)
                    sb(&b);
                start++;
                end++;
            }
            else if(tmp->data <= arr_sorted[start])
            {
                pb(a, &b);
                rb(&b);
                start++;
                end++;
            }
            else if(tmp->data > arr_sorted[end])
            {
                ra(a);
            }
            tmp = tmp->next;
        }
    }
}